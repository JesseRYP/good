<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trading Algorithm Backtester</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Trading Algorithm Backtester</h1>
        <form id="form">
            <label for="symbol">Company Symbol:</label>
            <input type="text" id="symbol" required>
            <label for="startDate">Start Date:</label>
            <input type="date" id="startDate" required>
            <label for="endDate">End Date:</label>
            <input type="date" id="endDate" required>
            <button type="submit">Run Backtest</button>
        </form>
        <div id="results"></div>
    </div>
    <script src="script.js"></script>
</body>
</html>
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
}

.container {
    max-width: 800px;
    margin: 50px auto;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
    text-align: center;
    color: #333;
}

form {
    display: flex;
    flex-direction: column;
}

label {
    margin-bottom: 5px;
    color: #333;
}

input {
    margin-bottom: 15px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

button {
    padding: 10px;
    background-color: #007BFF;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

#results {
    margin-top: 20px;
}
document.getElementById('form').addEventListener('submit', function(event) {
    event.preventDefault();
    const symbol = document.getElementById('symbol').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    fetchMarketData(symbol, startDate, endDate).then(data => {
        const rsiData = calculateRSI(data);
        const results = runBacktest(rsiData);
        displayResults(results);
    });
});

async function fetchMarketData(symbol, startDate, endDate) {
    const apiKey = 'YOUR_API_KEY';
    const url = `https://api.marketstack.com/v1/eod?access_key=${apiKey}&symbols=${symbol}&date_from=${startDate}&date_to=${endDate}`;
    const response = await fetch(url);
    const json = await response.json();
    return json.data;
}

function calculateRSI(data, period = 14) {
    let gains = [];
    let losses = [];
    let rsi = [];

    for (let i = 1; i < data.length; i++) {
        const change = data[i].close - data[i - 1].close;
        gains.push(change > 0 ? change : 0);
        losses.push(change < 0 ? Math.abs(change) : 0);
    }

    const avgGain = gains.slice(0, period).reduce((a, b) => a + b, 0) / period;
    const avgLoss = losses.slice(0, period).reduce((a, b) => a + b, 0) / period;

    let rs = avgGain / avgLoss;
    rsi.push(100 - (100 / (1 + rs)));

    for (let i = period; i < gains.length; i++) {
        const gain = gains[i];
        const loss = losses[i];

        const newAvgGain = ((avgGain * (period - 1)) + gain) / period;
        const newAvgLoss = ((avgLoss * (period - 1)) + loss) / period;

        rs = newAvgGain / newAvgLoss;
        rsi.push(100 - (100 / (1 + rs)));
    }

    return rsi;
}

function runBacktest(rsiData) {
    let cash = 10000;
    let shares = 0;
    const results = [];

    for (let i = 0; i < rsiData.length; i++) {
        if (rsiData[i] < 30 && cash > 0) {
            shares = cash / rsiData[i];
            cash = 0;
            results.push({ action: 'Buy', price: rsiData[i], shares });
        } else if (rsiData[i] > 70 && shares > 0) {
            cash = shares * rsiData[i];
            shares = 0;
            results.push({ action: 'Sell', price: rsiData[i], cash });
        }
    }

    results.push({ finalCash: cash });
    return results;
}

function displayResults(results) {
    const resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = '<h2>Backtest Results</h2>';
    results.forEach(result => {
        if (result.action) {
            resultsDiv.innerHTML += `<p>${result.action} at $${result.price.toFixed(2)}, Shares: ${result.shares.toFixed(2)}</p>`;
        } else {
            resultsDiv.innerHTML += `<p>Final Cash: $${result.finalCash.toFixed(2)}</p>`;
        }
    });
}
